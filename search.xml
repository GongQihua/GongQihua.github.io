<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>系统代理设置</title>
    <url>/Blog/2024/02/27/proxy-setting/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在git同步的时候，不是连不上github,就是连接超时，贼不习惯。</p>
<p>网上搜了一圈乱七八糟的解决方案，很多都是要改源文件的，感觉根本不用那么麻烦就自己摸索了一下，简便的设置方法<span id="more"></span></p>
<p>首先，代理设置全局(global)，全局，全局，重要的事说三遍。因为这基本解决了win上的git问题，但也有例外。</p>
<p>首先，修改git的proxy和修改terminal的proxy不一样，分情况说：</p>
<h2 id="Win"><a href="#Win" class="headerlink" title="Win"></a>Win</h2><h3 id="cmd-powershell修改proxy："><a href="#cmd-powershell修改proxy：" class="headerlink" title="cmd, powershell修改proxy："></a>cmd, powershell修改proxy：</h3><p>cmd：打开输入set http_proxy&#x3D;<a href="http://127.0.0.1:7890/">http://127.0.0.1:7890</a> 和 set https_proxy&#x3D;<a href="http://127.0.0.1:7890，7890是你的代理端口（proxy">http://127.0.0.1:7890，7890是你的代理端口（proxy</a> port），自己替换。</p>
<p>Powershell：输入 $Env:http_proxy&#x3D;”<a href="http://127.0.0.1:7890/">http://127.0.0.1:7890</a>“ 和 $Env:https_proxy&#x3D;”<a href="http://127.0.0.1:7890"，代理端口同上。">http://127.0.0.1:7890&quot;，代理端口同上。</a></p>
<p>clashX有一键复制，点port后的那个命令行小按键。但是是一次性的，每次重开窗口都要再打一遍，但我觉得比改源文件好，因为会影响电脑正常使用，还要去改回来。</p>
<h3 id="Vscode-JetBrains"><a href="#Vscode-JetBrains" class="headerlink" title="Vscode &amp; JetBrains"></a>Vscode &amp; JetBrains</h3><p>设置CMD和prompt没用，vscode里打开终端设置也没用，但是有个更便捷的方法：</p>
<p>文件-首选项-设置-应用程序-代理服务器-proxy，代理地址打进去。</p>
<p>JetBrains基本跟vs一样，找http proxy设置，往里一输就完了。</p>
<h2 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h2><p>首先还是全局，但mac是伪全局。</p>
<h3 id="终端："><a href="#终端：" class="headerlink" title="终端："></a>终端：</h3><p>猫猫头右键，有个终端代理模式（之类的)</p>
<p>输入terminal： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890</span><br></pre></td></tr></table></figure>

<p>设置完了，什么brew，nvm，npm全能跑，不香吗。</p>
<p>其他代理：同win cmd的方法，务必开全局，然后复制终端代理的代码。</p>
<h2 id="直接修改git-proxy："><a href="#直接修改git-proxy：" class="headerlink" title="直接修改git proxy："></a>直接修改git proxy：</h2><p>各系统通用，但仅仅让git跑起来，例如mac上的brew，conda之类的，如果被墙了照样没用</p>
<p>终端输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global https.proxy http://127.0.0.1:7890</span><br><span class="line">git config --global https.proxy https://127.0.0.1:7890</span><br></pre></td></tr></table></figure>

<p>（ps：实在不行，github desktop解决一切问题，代理不开全局都能活）</p>
]]></content>
      <categories>
        <category>Setup</category>
      </categories>
      <tags>
        <tag>Proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>生成在线URL</title>
    <url>/Blog/2024/02/27/picture-URL/</url>
    <content><![CDATA[<h1 id="本地图片生成在线URL"><a href="#本地图片生成在线URL" class="headerlink" title="本地图片生成在线URL"></a>本地图片生成在线URL</h1><p>方法就是用图床，找个在线图床网站，上传图片<span id="more"></span></p>
<p>可用网址：<a href="https://sm.ms/">https://sm.ms/</a></p>
<p>注册，上传图片，把网站给的Image URL复制下来就行</p>
<h1 id="PDF生成-URL"><a href="#PDF生成-URL" class="headerlink" title="PDF生成 URL"></a>PDF生成 URL</h1><p>方法类似，找个pdf url工具，上传，生成</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>URL</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity，启动!</title>
    <url>/Blog/2024/03/06/unity-begin/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>万事开头难，中间难，结尾难</p>
<p>世上无难事，只要肯放弃</p>
</blockquote>
<p>本篇记录unity入门和常用资源内容链接</p>
<p>官方教程内容是最好的内容！<span id="more"></span></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol>
<li><p>C# 环境配置</p>
<p>win专属：visual studio一步到位，选C# 桌面应用，unity扩展这两项即可。</p>
<p>或者：</p>
<p>下载dotnet（官网或者brew），vscode扩展，rider。</p>
<p>mac要多下一个mono框架</p>
</li>
<li><p>unity配置</p>
<p>官网下载unity hub，hub安装选择unity版本</p>
<p>建议不要默认，进去自选，最小安装，以后可以加配（加了不能删，什么鬼啊！）</p>
<p>设置unity使用的编辑器，默认win和mac都是vs（mac的vs都快GG了）</p>
<p>编辑器的unity好用插件，按需求来</p>
</li>
</ol>
<h2 id="官方资源"><a href="#官方资源" class="headerlink" title="官方资源"></a>官方资源</h2><p>建议看英语，并不是中文不好看，而是中文文档是机翻！有些甚至不翻！（都有GPT了，有没有搞错啊）</p>
<p>官网：<a href="https://unity.com/">https://unity.com</a></p>
<p>文档：<a href="https://docs.unity.com/">https://docs.unity.com</a></p>
<p>Unity Learn：<a href="https://learn.unity.com/">https://learn.unity.com</a></p>
<p>Assert Store：<a href="https://assetstore.unity.com/">https://assetstore.unity.com</a></p>
<blockquote>
<p>先在assert store里import，然后hub创建空项目，package manager导入</p>
</blockquote>
<h2 id="软件界面"><a href="#软件界面" class="headerlink" title="软件界面"></a>软件界面</h2><p>软件界面各个按键是操作的基本，看官方文档吧</p>
<p>顺便b站和github都有教程，边做边熟悉，关键是一些画面快速操作的快捷键</p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>U3D</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建个人博客</title>
    <url>/Blog/2024/02/27/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="个人博客搭建指北"><a href="#个人博客搭建指北" class="headerlink" title="个人博客搭建指北"></a>个人博客搭建指北</h1><p>搭建个人静态博客，Hexo+Next+Github Pages。</p>
<p>平台：macos</p>
<p>本地：nvm，JS一套，Hexo，Next主题</p>
<p>网站：免费github pages，或自己搞个云服务<span id="more"></span></p>
<h1 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h1><ol>
<li><p>Xcode开发工具，带有一些基础环境和git</p>
</li>
<li><p>安装本地NodeJS</p>
<ol>
<li><p>这一步有坑，不要brew安装或者官网的sdk安装，会报错。在安装 Hexo 的过程中出现 <code>EACCES</code> 权限错误，这里不要看网上的建议，<strong>不要</strong> 使用 root、sudo 等方法覆盖权限。会报更大的错！</p>
</li>
<li><p>使用nvm或者nvs部署，这里用的是nvm。</p>
<p>链接：<a href="https://github.com/nvm-sh/nvm">https://github.com/nvm-sh/nvm</a></p>
<p>terminal命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh</span><br></pre></td></tr></table></figure>

<p>下完验证一下</p>
<p><code>nvm -v</code></p>
<p>如果没有，去配一下环境，别看网上一堆，要找mac zsh添加环境</p>
</li>
<li><p>nvm安装node和npm</p>
<p><code>nvm install node</code> 可以指定版本，看一下nvm help</p>
<p>装完验证一下，不行加环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>安装Hexo</p>
<p>精简版</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>也可以用完整版安装指令，装完验证，要指定版本的话记得看一下版本对应</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>
</li>
<li><p>建站，创立项目文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>可以自定义路径，现在文件夹在主目录下，可以查看</p>
</li>
<li><p>在文件夹安装Next主题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd your-hexo-site</span><br><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>大功告成</p>
</li>
</ol>
<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p>没有什么，是比官方文档更好使的教程！</p>
<p>中文：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a> 英语：<a href="https://hexo.io/docs/index.html">https://hexo.io/docs/index.html</a></p>
<p>创建文章，编辑source下的markdown文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p>生成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p>服务器预览</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>发布</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<h2 id="部署github"><a href="#部署github" class="headerlink" title="部署github"></a>部署github</h2><ol>
<li><p>安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改主config.yml配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;repository url&gt; #https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io</span><br><span class="line">  branch: [branch]</span><br><span class="line">  message: [message]</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成站点文件并推送至远程库。执行 <code>hexo clean &amp;&amp; hexo deploy</code>。注意，如果是从站，config里把前面的网站URL设置一下</p>
</li>
</ol>
<p><em><strong>GitHub Pages 源存储库的建议限制为1 GB。 有关详细信息，请参阅“关于GitHub 上的大文件” 发布的GitHub Pages 站点不得超过1 GB。 如果花费的时间超过10 分钟，GitHub Pages 部署将超时。</strong></em></p>
<p><em><strong>个人主页只能创建一个，项目主页可以创建多个</strong></em></p>
<h1 id="Next主题"><a href="#Next主题" class="headerlink" title="Next主题"></a>Next主题</h1><p>同给出官方文档链接：</p>
<p><a href="https://theme-next.iissnan.com/">https://theme-next.iissnan.com/</a></p>
<p>似乎是旧版的，新版的我只找到更新日志，但是旧版大多通用</p>
<p><a href="https://theme-next.org/index.html">https://theme-next.org/index.html</a></p>
<p>在config里的修改theme，即可启用主题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<p>剩下的自定义功能还是去看官方文档吧</p>
<hr>
<p>（ps: 第一次用typora写完一个文档，感觉好难用啊，有些本来要用上的html语法都识别不出来，:(，还有格式问题，不如直接vscode编辑，大呼上当)</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity Playground</title>
    <url>/Blog/2024/03/09/unity-Playground/</url>
    <content><![CDATA[<h1 id="Unity-练手第一个游戏"><a href="#Unity-练手第一个游戏" class="headerlink" title="Unity 练手第一个游戏"></a>Unity 练手第一个游戏</h1><p>Unity2D的初识项目，新手入门第一次项目体验。<span id="more"></span></p>
<p>Unity官方网址： <a href="https://learn.unity.com/project/unity-playground">https://learn.unity.com/project/unity-playground</a></p>
<p>主要流程还是要看官方教程，作为熟悉unity第一个上手项目，官方手把手教程，按步骤一步步来</p>
<p>资源载入： <a href="https://assetstore.unity.com/packages/templates/tutorials/unity-learn-playground-urp-109917">https://assetstore.unity.com/packages/templates/tutorials/unity-learn-playground-urp-109917</a></p>
<p>按上一篇教程，创建2D空模版，package manager import</p>
<p>这个教程里主要是2D项目的入门介绍，脚本都已经写好了，主要是熟悉控件和unity2D的使用</p>
<p>里面还有很多初级的游戏模版，可以直接运行，控件脚本可以打开看一看。</p>
<p>Playground的项目里还有好几个example，可以都运行一下，启发启发灵感。</p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>U3D</tag>
      </tags>
  </entry>
  <entry>
    <title>CreatorKit-FPS</title>
    <url>/Blog/2024/03/11/CreatorKit-FPS/</url>
    <content><![CDATA[<h1 id="Unity3D项目初识"><a href="#Unity3D项目初识" class="headerlink" title="Unity3D项目初识"></a>Unity3D项目初识</h1><p>与Playground类似，本项目作为Unity 3D项目的入门，是官方教程的一部分<span id="more"></span></p>
<p>官方教程链接：<a href="https://learn.unity.com/project/creator-kit-fps">https://learn.unity.com/project/creator-kit-fps</a></p>
<p>项目载入地址：<a href="https://assetstore.unity.com/packages/templates/tutorials/unity-learn-creator-kit-fps-urp-149310">https://assetstore.unity.com/packages/templates/tutorials/unity-learn-creator-kit-fps-urp-149310</a></p>
<p>创立一个3D空模版，直接assert store import就能开始了</p>
<p>是一个初级的3D项目，让我们熟悉unity3D编辑器的应用，和控件的使用</p>
<p>跟随教程一步步往下就行，主要体验过程</p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>U3D</tag>
      </tags>
  </entry>
  <entry>
    <title>2D Game Kit</title>
    <url>/Blog/2024/03/18/2D_Game_Kit/</url>
    <content><![CDATA[<h2 id="2D-Game-Kit"><a href="#2D-Game-Kit" class="headerlink" title="2D Game Kit"></a>2D Game Kit</h2><p>2D is a collection of mechanics, tools, systems and assets to hook up gameplay without writing any code. To show how these elements can be used we’ve also created a game example using these systems.<span id="more"></span></p>
<p>官方链接：<a href="https://learn.unity.com/project/2d-game-kit">https://learn.unity.com/project/2d-game-kit</a></p>
<p>资源地址：<a href="https://assetstore.unity.com/packages/templates/tutorials/2d-game-kit-107098">https://assetstore.unity.com/packages/templates/tutorials/2d-game-kit-107098</a></p>
<p>2D 横版跳跃的新手包，主要是教你全局设计2D内容，脚本都是配置好的，往上拖资源和控件就行。这里多设计到一个tile map编辑，但是tilemap里的组件是帮你写好的，主要是体验</p>
<p>主要有两个进阶内容，但都是写好组件，跟着教程走就行</p>
<p>触发式组件（机关开门，甚至物品与怪物的交互）</p>
<p>场景传送（涉及同场景传送和不同场景传送到方法）</p>
<p>内置的脚本可以看一下</p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>U3D</tag>
      </tags>
  </entry>
  <entry>
    <title>CreatorKit Beginner Code</title>
    <url>/Blog/2024/03/12/CreatorKit_BeginnerCode/</url>
    <content><![CDATA[<h1 id="Unity脚本设计入门"><a href="#Unity脚本设计入门" class="headerlink" title="Unity脚本设计入门"></a>Unity脚本设计入门</h1><p>本篇是unity游戏中，C#脚本编辑的初体验<span id="more"></span></p>
<p>依旧是跟随官方教程</p>
<p>链接：<a href="https://learn.unity.com/project/creator-kit-beginner-code">https://learn.unity.com/project/creator-kit-beginner-code</a></p>
<p>导入：<a href="https://assetstore.unity.com/packages/templates/tutorials/creator-kit-beginner-code-urp-151986">https://assetstore.unity.com/packages/templates/tutorials/creator-kit-beginner-code-urp-151986</a></p>
<p>记得创建3D URP模版，不然运行有bug</p>
<p>基本就是C#的标准结构，space，class，function，然后套官方函数，比如读属性，或者位置角度之类的，很简单。</p>
<p>游戏挺有意思的，arpg，可以自己试着加一点获胜条件啥的玩一玩</p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>U3D</tag>
      </tags>
  </entry>
  <entry>
    <title>Ruby&#39;s Adventure 2D Beginner</title>
    <url>/Blog/2024/04/09/Ruby_Adventure_2D_Beginner/</url>
    <content><![CDATA[<h1 id="Ruby’s-Adventure-2D-Beginner"><a href="#Ruby’s-Adventure-2D-Beginner" class="headerlink" title="Ruby’s Adventure: 2D Beginner"></a>Ruby’s Adventure: 2D Beginner</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>官方的一个非常好的2D教程，涉及：</p>
<p>使用 2D 资源</p>
<p>2D RPG 游戏制作流程</p>
<p>创建并控制角色（使用脚本代码）</p>
<p>使用瓦片地图创建世界</p>
<p>设置动态精灵，角色动画</p>
<p>一些简单特效（粒子效果），UI系统和2D声音系统<span id="more"></span></p>
<p>官方地址：<a href="https://learn.unity.com/project/ruby-s-2d-rpg?uv=2020.3">https://learn.unity.com/project/ruby-s-2d-rpg?uv=2020.3</a></p>
<p>Assert store：<a href="https://assetstore.unity.com/packages/templates/tutorials/unity-learn-2d-beginner-complete-project-urp-140253">https://assetstore.unity.com/packages/templates/tutorials/unity-learn-2d-beginner-complete-project-urp-140253</a></p>
<h2 id="创建并控制角色"><a href="#创建并控制角色" class="headerlink" title="创建并控制角色"></a>创建并控制角色</h2><p>png图像跟着教程往unity拖，unity会自动转格式</p>
<h3 id="移动角色"><a href="#移动角色" class="headerlink" title="移动角色"></a>移动角色</h3><p>Unity 中，通过游戏对象的 Transform 组件，可以获取该对象在场景中的位置 Position，并通过更改 Transform 组件 Position 的值，可以更改其位置。</p>
<h3 id="移动脚本"><a href="#移动脚本" class="headerlink" title="移动脚本"></a>移动脚本</h3><p>在 Update 方法中，更改 Ruby 角色位置</p>
<p>Unity 在每帧执行 Update 内的代码，为了形成动感，游戏（就像电影一样）是高速显示的静止图像。在游戏中通常会在一秒内显示 30 或 60 张图像。其中的一张图像称为一帧。</p>
<p>在此 Update 函数中，你可以编写想要在游戏中连续发生的任何操作（例如，读取玩家的输入、移动游戏对象或计算经过的时间）。</p>
<h4 id="Vector2-二维向量"><a href="#Vector2-二维向量" class="headerlink" title="Vector2 二维向量"></a>Vector2 二维向量</h4><p>在脚本中，Vector 向量&#x2F;矢量指的是带方向的线段</p>
<p>在 Unity 中，Transform 值使用 x 表示水平位置，使用 y 表示垂直位置，使用 z 表示深度。这 3 个数值组成一个坐标。由于此游戏是 2D 游戏，你无需存储 z 轴位置，因此你可以在此处使用 Vector2 来仅存储 x 和 y 位置。</p>
<p>Transform 中 position 的类型，也是 Vector2</p>
<h3 id="控制角色"><a href="#控制角色" class="headerlink" title="控制角色"></a>控制角色</h3><p>控制方式：电脑或主机的输入设备</p>
<p>在 Unity 项目设置中，可以通过 Input Manager 进行默认的游戏输入控制设置 Edit &gt; Project Settings &gt; Input</p>
<p>使用Input类来读取传统游戏输入中设置的轴&#x2F;鼠标&#x2F;按键，以及访问移动设备上的多点触控&#x2F;加速度计数据。若要使用输入来进行任何类型的移动行为，请使用 Input.GetAxis。 它为您提供平滑且可配置的输入 - 可以映射到键盘、游戏杆或鼠标。 请将 Input.GetButton 仅用于事件等操作。不要将它用于移动操作。Input.GetAxis 将使脚本代码更简洁。</p>
<h3 id="时间和帧率"><a href="#时间和帧率" class="headerlink" title="时间和帧率"></a>时间和帧率</h3><p>当前的代码中，帧数越高，同一时间内，执行 Update 的次数越多，角色移动速度越快。</p>
<p>如果游戏以每秒 60 帧的速度运行，那么 Ruby 将移动 0.1 _ 60，因此每秒移动 6 个单位。但是，如果游戏以每秒 10 帧的速度运行，就像刚刚让游戏运行的那样，那么 Ruby 仅移动 0.1 _ 10，因此每秒移动 1 个单位！</p>
<p>如果一个玩家的计算机非常陈旧，只能以每秒 30 帧的速度运行游戏，而另一个玩家的计算机能以每秒 120 帧的速度运行游戏，那么这两个玩家的主角的移动速度会有很大差异。这样就会使游戏的难易程度提高或降低，具体取决于运行游戏的计算机。</p>
<p>而帧数是由硬件水平影响的（越好越高），不同电脑中，会导致游戏效果完全不同</p>
<p>可以锁帧，但硬件能达到的情况下（显卡、显示器），锁帧会降低画面效果。</p>
<p>要解决此问题，你需要以单位&#x2F;秒来表示 Ruby 的移动速度，而不是采用单位&#x2F;帧（目前采用此设置）。</p>
<p>为此，你需要通过将移动速度乘以 Unity 渲染一帧所需的时间来更改移动速度。如果游戏以每秒 10 帧的速度运行，则每帧耗时 0.1 秒。如果游戏以每秒 60 帧的速度运行，则每帧耗时 0.017 秒。如果将移动速度乘以该时间值，则移动速度将以秒表示。</p>
<p>Time.deltaTime 每帧的时间间隔，float 类型</p>
<p>一般将这个值，用在 Update 方法中，乘以移动的距离（或角度），用来获取恒定（不同硬件水平的电脑间）的速度</p>
<h2 id="Tilemap-瓦片地图系统"><a href="#Tilemap-瓦片地图系统" class="headerlink" title="Tilemap 瓦片地图系统"></a>Tilemap 瓦片地图系统</h2><p>Tilemap 是 2D 游戏中，用来构建世界的工具，这个工具使用技术的好坏，直接影响到你制作 2D 游戏时的工作量</p>
<p>瓦片地图组件，是一个存储和操作 Tile 资源的系统，用来创建 2D 关卡。</p>
<p>该系统还可以将所需信息通过所包含的 Tiles 传输到其他相关组件，例如 Tilemap Renderer 和 Tilemap Collider 2D。</p>
<p>创建瓦片地图时，Grid 组件自动作为瓦片地图的父级，并在将瓦片布置到瓦片地图上时作为参照</p>
<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>素材相关：</p>
<ul>
<li>Sprite(精灵)：纹理的容器。大型纹理图集可以转换为精灵图集(Sprite Sheet)</li>
<li>Tile(瓦片)：包含一个精灵，以及二个属性，颜色和碰撞体类型。使用瓦片就像在画布上画画一样，画画时可以设置一些颜色和属性</li>
</ul>
<p>工具相关：</p>
<ul>
<li>Tile Palette(瓦片调色板)：当你在画布(Canvas)上画画时，会需要一个位置来保存绘画的结果。类似地，调色板(Palette)的功能就是保存瓦片，将它们绘制到网格上</li>
<li>Brush(笔刷)：用于将画好的东西绘制到画布上。使用 Tilemap 时，可以在多个笔刷中任意选择，绘制出线条、方块等各种形状</li>
</ul>
<p>组件相关：</p>
<ul>
<li>Tilemap（瓦片地图）：类似 Photoshop 中的图层，我们可以在 Tilemap 上画上 Tile</li>
<li>Grid(网格)：用于控制网格属性的组件。Tilemap 是 Grid 的子对象。Grid 类似于 UI Canvas(UI 画布)。</li>
<li>Tilemap Renderer(瓦片地图渲染器)：是 Tilemap 游戏对象的一部分,用于控制 Tile 在 Tilemap 上的渲染，控制诸如排序、材质和遮罩等。</li>
</ul>
<p>分类</p>
<ul>
<li>Rectangler 矩形瓦片地图</li>
<li>Hexagonal 六边形瓦片地图：除常规瓦片地图外，Unity 还提供 Hexagonal Point Top Tilemap 和 Hexagonal Flat Top Tilemap 瓦片地图。六角形瓦片通常用于战略类桌面游戏，因为它们的中心与边上的任何点之间具有一致的距离，并且相邻的瓦片总是共享边。因此，这些瓦片非常适合构建几乎任何类型的大型游戏区域，并让玩家做出关于移动和定位的战术决策。</li>
</ul>
<h3 id="瓦片和使用流程"><a href="#瓦片和使用流程" class="headerlink" title="瓦片和使用流程"></a>瓦片和使用流程</h3><p><strong>瓦片</strong>是排列在<strong>瓦片地图</strong>上的<strong>资源</strong>，用于构建 2D 环境。每个瓦片引用一个选定的<strong>精灵</strong>，然后在瓦片地图网格上的瓦片位置处渲染该精灵。</p>
<ol>
<li>预处理 sprite 资源：将图片资源拖拽到 project 中，生成 sprite；然后一般需要进行切割 slice ，将其配置成需要的各个 tile;</li>
<li>创建要在其上绘制瓦片的瓦片地图。此过程中还会自动创建 Grid 游戏对象作为瓦片地图的父级。</li>
<li>直接创建瓦片资源，或者通过将用作瓦片素材的精灵带入 Tile Palette 窗口自动生成瓦片。</li>
<li>创建一个包含<strong>瓦片资源</strong>的 Tile Palette，并使用各种笔刷来绘制到<strong>瓦片地图</strong>上。</li>
<li>可以将 Tilemap Collider 2D 组件连接到瓦片地图以便使瓦片地图与 Physics2D 交互。</li>
</ol>
<p>一般 Tilemap 创建三个，分别为:</p>
<ul>
<li>background(地图背景)</li>
<li>bound(边界)</li>
<li>foreground(前景，主要是地形)</li>
</ul>
<h3 id="场景排序"><a href="#场景排序" class="headerlink" title="场景排序"></a>场景排序</h3><p>透视图指的是有深度、距离感的图，一般要三维中的深度轴来表现场景的深度，而二维游戏中没有这个深度，只能通过前后来仿造深度效果，称为“伪透视图”</p>
<p>先前通过调整瓦片的 Order in Layer 属性来解决了瓦片地图的排序问题，但并非总是希望一个游戏对象在另一个游戏对象之上，比如，在同一个瓦片地图中，玩家角色在一个物体之前（比如一棵树）时，应该是玩家遮挡树，而玩家移动到树后时，应该是树遮挡玩家，这就需要“伪造”透视图。</p>
<p>在 2D 游戏中，场景里的 <strong>“前后”</strong> 是由 Y 轴决定的，需要让 Unity 根据游戏对象的 y 坐标来绘制游戏对象</p>
<p>Y 轴 y 坐标值越小，越靠前，应该遮挡 y 坐标值较大的游戏对象，也就是 y 坐标较小的游戏对象后绘制，就会位于上层</p>
<p>每个 Sprite 都有一个轴心（中心点），Unity 根据 pivot 对 sprite 进行定位，这个 pivot 可以在 sprite editor 中调整，可以将其设置到 sprite 上任意位置</p>
<p>在 2D Rpg 游戏场景中的游戏对象，如果想要实现较为真实的 “伪透视” 效果，最好将游戏对象的 sprite 中 pivot 都设置到素材的最下方正中。</p>
<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>动画剪辑（Animation clip）是动画的基本组成部分，包含某些对象应如何随时间改变其位置、旋转或其他属性的相关信息。</p>
<p>动画剪辑一般和不同的状态相挂接，比如“静止状态”挂接站立不移动时的动画、“奔跑状态”挂接跑动的动画剪辑….</p>
<p>Animator Controller 用来控制不同状态下动画的播放，以及状态间的转换</p>
<p>所有这些部分（动画剪辑、Animator Controller 和 Avatar）都通过 Animator 组件一起附加到某个游戏对象上。</p>
<p>Animator 分为两个部分，左侧是 Layers 和 Parameters，右侧是动画状态机 (Animation State Machine)：</p>
<ul>
<li>第 1 部分：Layers 和 Parameters<br>Layers 可用于 3D 动画，因为你可以将动画用于角色的不同部分。<br>Parameters 由我们的脚本用来向 Controller 提供信息。</li>
<li>第 2 部分：动画状态机<br>动画状态机以图形方式显示动画的所有状态以及如何从一段动画过渡到另一段动画。</li>
</ul>
<p>混合树 (Blend Tree)，这种混合树允许你根据参数来混合多段动画。</p>
<p>Animator 是动画组件，可以理解为一个用来处理动画的功能型容器，所有和动画相关的部分（动画剪辑、Animator Controller 和 Avatar）都通过 Animator 组件一起附加到某个游戏对象上。</p>
<h2 id="UI界面"><a href="#UI界面" class="headerlink" title="UI界面"></a>UI界面</h2><p>Unity 用户界面 (Unity UI) 软件包（也称为 uGUI）是一个较旧的、基于游戏对象的 UI 系统，您可以使用它为游戏和应用程序开发运行时 UI。在 Unity UI 中，即可使用组件和 Game 视图来排列和定位用户界面并设置其样式。它支持高级渲染和文本功能。</p>
<p>使用步骤</p>
<ol>
<li>创建 画布 Canves</li>
<li>在 画布 Canves 中添加 UI 组件（文本、文本框、按钮等等）</li>
<li>设置好布局、动画，以及摄像机、特效等</li>
<li>需要的话，再添加交互事件</li>
</ol>
<h3 id="UGUI-基础"><a href="#UGUI-基础" class="headerlink" title="UGUI 基础"></a>UGUI 基础</h3><p><strong>Rect Transform 矩形变换</strong></p>
<p>矩形变换像常规变换一样具有位置，旋转和比例，但它还具有宽度和高度表示矩形的尺寸。</p>
<p><strong>Pivot 枢轴（轴心）</strong></p>
<p>旋转、大小和缩放修改都是围绕轴心进行的，因此轴心的位置会影响旋转、大小调整或缩放的结果。</p>
<p><strong>Anchors 锚点</strong></p>
<p>锚点在场景视图中显示为四个小三角形手柄（四叶花）。每个叶子位置对应矩形的四个顶点。当描点随父对象变换时，矩形的顶点与对应的锚点相对位置必须保持不变。</p>
<p>例如，子项可以锚定到父项的中心，或锚定到一个角。</p>
<p>通过锚定还可以让子项随父项的宽度或高度一起拉伸。矩形的每个角与其对应的锚点都有一个固定的偏移，即矩形的左上角与左上角锚点有一个固定的偏移，以此类推。因此，矩形的不同角可以锚定到父矩形中的不同点。</p>
<p><strong>遮罩</strong></p>
<p>两个图像，一个是原图像，一个是遮罩图像，显示的是原图像，遮罩图像控制原图像的显示范围，只显示背遮罩区域的原图像。</p>
<p>所以可以通过更改遮罩图像的大小，来不失真地显示原图像的部分区域</p>
<p><strong>静态成员</strong></p>
<p>可以使用 static 关键字把类成员定义为静态的。当我们声明一个类成员为静态时，意味着无论有多少个类的对象被创建，只会有一个该静态成员，并且被所有类对象所共享。</p>
<h2 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h2><p>为了模拟位置的影响，Unity 要求声音源来自附加到对象的 <strong>音频源</strong> Audio Source。然后，发出的声音由附加到另一个对象（通常是主摄像机）上的 <strong>音频监听器</strong> Audio Listener 拾取。Unity 然后可以模拟音频源与监听器物体之间的距离和位置的影响，并相应地播放给用户。此外还使用源对象和监听器对象的相对速度来模拟多普勒效应以增加真实感。</p>
<p>Unity 混音器 (Audio Mixer) 允许您混合各种音频源，对音频源应用效果，以及执行母带制作 (mastering)。</p>
<p>Unity 可以导入大多数标准音频文件格式，音频文件在 Unity 中 <strong>音频剪辑</strong> Audio Clip</p>
<p>AIFF、WAV、MP3 和 Ogg 等格式的音频文件，只需要将文件拖入 Project 面板即可。</p>
<h3 id="音频剪辑-Audio-Clip"><a href="#音频剪辑-Audio-Clip" class="headerlink" title="音频剪辑 Audio Clip"></a>音频剪辑 Audio Clip</h3><p>音频剪辑 Audio Clip 就是在 Unity 中实际发声的音频文件</p>
<p>Unity 支持单声道、立体声和多声道音频资源（最多八声道）</p>
<p>Unity 可以导入的音频文件格式包括：.aif、.wav、.mp3 和 .ogg。Unity 还能够导入 .xm、.mod、.it 和 .s3m 格式的音轨模块。</p>
<h3 id="音频源-Audio-Source"><a href="#音频源-Audio-Source" class="headerlink" title="音频源 Audio Source"></a>音频源 Audio Source</h3><p>音频源 (Audio Source) 在场景中播放 音频剪辑 Audio Clip。</p>
<p>如果不为音频源指定<strong>音频剪辑</strong>，音频源不起作用。</p>
<p>音频源就像一个控制器，用于启动和停止该剪辑音源的播放，以及修改其他音频属性</p>
<p>核心属性：</p>
<ul>
<li><p>Audio Clip： 将要播放的声音剪辑文件。</p>
</li>
<li><p>Output： 默认情况下，剪辑将直接输出到场景中的音频监听器 (Audio Listener)</p>
</li>
<li><p>Mute： 如果启用此选项，则为静音</p>
</li>
<li><p>Play On Awake： 如果启用此选项，声音将在场景启动时开始播放。如果禁用此选项，需要通过脚本使用 Play() 命令启用播放</p>
</li>
<li><p>Loop： 启用此选项可在<strong>音频剪辑</strong>结束后循环播放</p>
</li>
<li><p>Priority： 从场景中存在的所有音频源中确定此音频源的优先级。（Priority 值为 0 表示优先级最高。值为 256， 表示优先级最低。默认值为 128）</p>
</li>
<li><p>Volume： 设置声音的大小，但请注意，除了这个属性外，玩家听到的声音，与离<strong>音频监听器</strong>的距离成正比，以米为世界单位</p>
</li>
<li><p>Spatial Blend： 设置 3D 引擎对音频源的影响程度。</p>
</li>
</ul>
<h3 id="音频监听器-Audio-Listener"><a href="#音频监听器-Audio-Listener" class="headerlink" title="音频监听器 Audio Listener"></a>音频监听器 Audio Listener</h3><p>音频监听器 (Audio Listener) 充当类似于麦克风的设备。它接收来自场景中任何给定音频源的输入，并通过计算机扬声器播放声音。对于大多数应用程序，最有意义的是将监听器附加到主摄像机。</p>
<p>音频监听器与音频源配合使用，可让您为游戏营造听觉体验。当音频监听器连接到场景中的<strong>游戏对象</strong>时，任何足够接近监听器的源都将被拾取并输出到计算机的扬声器。每个场景只能有 1 个音频监听器才能正常工作。</p>
<p>通常，应该将音频监听器连接到主摄像机或代表玩家的游戏对象。</p>
<p>注意：</p>
<ul>
<li>每个场景只能有一个音频监听器</li>
</ul>
<h3 id="Unity-中播放声音的基本使用步骤"><a href="#Unity-中播放声音的基本使用步骤" class="headerlink" title="Unity 中播放声音的基本使用步骤"></a>Unity 中播放声音的基本使用步骤</h3><p><strong>通过 Unity 面板可视化控制</strong></p>
<ol>
<li>为当前场景配置 Audio Listener，可以连接到主摄像机，或玩家游戏对象（第一人称或第三人称追尾游戏）；</li>
<li>将音频文件素材拖拽入 project 窗口，生成 音频剪辑 Audio Clip</li>
<li>创建空游戏对象，并为其添加 音频源 Audio Source 组件，用来配置管理 Audio Clip</li>
</ol>
<p><strong>使用代码</strong></p>
<ul>
<li>方式一（一对一）：为游戏中每个要播放声音的游戏对象都配置音频源组件，并绑定该音频源的音频剪辑，通过代码来控制该声音源组件来播放其中的音频剪辑；</li>
<li>方式二（一对多）：通过一个音频源，用代码控制播放多个不同的音频剪辑，使用 AudioSource 类对象的一个名为 PlayOneShot 的函数来实现</li>
</ul>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>U3D</tag>
      </tags>
  </entry>
</search>
